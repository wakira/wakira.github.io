<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Pure Trade-offs</title>
        <link>https://site.a64.work</link>
        <description><![CDATA[Pursuing pureness without being autistic]]></description>
        <atom:link href="https://site.a64.work/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 24 Dec 2021 00:00:00 UT</lastBuildDate>
        <item>
    <title>The status of non-integer HiDPI scaling support in Linux</title>
    <link>https://site.a64.work/posts/2021-12-24-status-of-hidpi-linux.html</link>
    <description><![CDATA[<h1>The status of non-integer HiDPI scaling support in Linux</h1>
<article>
  <section class="header">
    Posted on December 24, 2021
    
  </section>
  <section>
    <p>TLDR: there is no perfect solution for the time being.</p>
<h2 id="hidpi-in-wayland-is-far-from-perfect">HiDPI in wayland is far from perfect</h2>
<p>A common misconception is that wayland-native applications works perfectly with fractional scaling. This is not true if you need a fractional scale such as 1.5x. The fact is wayland protocol can only communicate a integer scale value with its clients. To achieve fractional scaling like 1.5x, compositors usually tell client windows to draw at 2x and then downscale the raster image by 0.75. The artifacts are indeed very noticeable especially on texts where font rendering techniques like sub-pixel hinting are completely messed up by the downscaling.</p>
<p>Personally I cannot accept the raster-downscaled image on my 4k 27’’ monitor (163ppi). It’s like an additional gaussian blur filter is applied. On a 200+ ppi screen the situation is better but you can still make out the difference if you compare side by side.</p>
<p>XWayland applications are in a much worse situation where they are rendered at 1x and upscaled. No matter how high the ppi of your screen is the blurriness does not go away.</p>
<h2 id="some-graphical-toolkits-can-render-directly-at-a-fractional-scale">Some graphical toolkits can render directly at a fractional scale</h2>
<p>QT and electron has the ability to render directly at a fractional scale. For example, if you are using KDE in X11 you can set a fractional scale and all QT applications will look perfect. Gtk cannot render its UI elements at a fractional scale but scaling the font alone is enough in most cases (although it makes the UI ugly).</p>
<p>Unfortunately you cannot set this fractional value per screen either in X or wayland. In other words, if you have multiple monitors of vastly different ppi, you will have to choose between the ideal scale factor (by using raster downscaling) and crisp images (by setting the render scale of toolkits).</p>
<h2 id="some-additional-annoyances">Some additional annoyances</h2>
<p>Integer scaling is perfect in Gnome even for XWayland applications (if you don’t move them across screens). However in KDE Wayland and Swaywm you will see XWayland applications being upscaled from 1x. Since almost all games are run through XWayland this makes gaming impossible even if your HiDPI monitor requires only integer scaling.</p>
  </section>
</article>
]]></description>
    <pubDate>Fri, 24 Dec 2021 00:00:00 UT</pubDate>
    <guid>https://site.a64.work/posts/2021-12-24-status-of-hidpi-linux.html</guid>
    <dc:creator>autrim64</dc:creator>
</item>
<item>
    <title>Watch out for DNS leak when using VPN and systemd-resolved</title>
    <link>https://site.a64.work/posts/2021-08-27-watch-out-for-dns-leak-using-vpn-and-systemd-resolved.html</link>
    <description><![CDATA[<h1>Watch out for DNS leak when using VPN and systemd-resolved</h1>
<article>
  <section class="header">
    Posted on August 27, 2021
    
  </section>
  <section>
    <h2 id="your-vpn-connection-may-not-be-as-safe-as-you-think">Your VPN connection may not be as safe as you think</h2>
<p>Many VPN clients in Linux modify the nameserver record in <code>/etc/resolv.conf</code> to its own DNS server when initiating connection. This will not work on distros using systemd-resolved as DNS resolver. Your DNS queries will go to your normal DNS server which will know every site you visit.</p>
<p>You can read <a href="https://blogs.gnome.org/mcatanzaro/2020/12/17/understanding-systemd-resolved-split-dns-and-vpn-configuration/">this blogpost</a> for a more in-depth understanding of how systemd-resolved manages DNS queries. In short, <code>/etc/resolv.conf</code> is managed by systemd-resolved and should not be edited manually. Instead, you can configure the DNS server for a particular NIC by <code>resolvectl dns [NIC_NAME] [DNS_IP]</code> command.</p>
<p>Unfortunately for ProtonVpn that I am currently using, there are currently no clients designed with systemd-resolved in mind. Neither the official client nor the community-maintained cli-client handles DNS correctly (there is a <a href="https://github.com/Rafficer/linux-cli-community/pull/323">PR</a> for the community client though).</p>
<h2 id="split-dns-is-useful-but-may-have-security-implications">Split DNS is useful but may have security implications</h2>
<p>As far as DNS is concerned, you can either force a global DNS server or use a different one per link.</p>
<p>The former is easier to manage but cause problems when using VPNs or connecting to public WIFI hotspots. The latter requires more configuration and may surprise you when you find that you are actually using another DNS server then the one you want.</p>
<h3 id="global-dns">Global DNS</h3>
<p>To force a global DNS regardless of network connections. You can your systemd-resolved configuration file and specify global DNS servers and let it take precedence over NIC-specific settings (by setting <strong>Domains=~.</strong>). Without <strong>Domains=~.</strong> the global setting will be considered a fallback instead.</p>
<pre><code>[Resolve]
DNS=XX.XX.XX.XX YY.YY.YY.YY
Domains=~.
</code></pre>
<p>Beware that there is no way to change the global setting on the fly using the <code>resolvectl</code> command. You will have to edit the config file and restart systemd-resolved for changes to take effect.</p>
<h3 id="split-dns">Split DNS</h3>
<p>Split DNS is “the correct way” to use systemd-resolved. You can specify a global (fallback) DNS (without <strong>Domains=~.</strong>) and disable link-specific DNS settings in NetworkManager settings for connections that you want your global setting to take effect.</p>
<p>Caveat: in NetworkManager, DNS by DHCP is enabled by default. I would advise you to check your DNS resolver configuration using <code>resolvectl status</code> everytime you connect to a new network as the DHCP server might give you a DNS server that you do not trust.</p>
  </section>
</article>
]]></description>
    <pubDate>Fri, 27 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://site.a64.work/posts/2021-08-27-watch-out-for-dns-leak-using-vpn-and-systemd-resolved.html</guid>
    <dc:creator>autrim64</dc:creator>
</item>
<item>
    <title>Don't Pretend to be Pure</title>
    <link>https://site.a64.work/posts/2020-10-23-dont-pretend-to-be-pure.html</link>
    <description><![CDATA[<h1>Don't Pretend to be Pure</h1>
<article>
  <section class="header">
    Posted on October 23, 2020
    
  </section>
  <section>
    <p>You might have heard of the <a href="https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/">ReaderT design pattern</a> in Haskell. It is a good way to provide global capabilities, such as logging and database access to your application. In short, the code of your application lives inside <code>type App = ReaderT Env IO</code> monad where <code>Env</code> is a record containing some global functions and variables (IORef, MVar…).</p>
<p>Yes, global mutable states! How terrifying in the nice and pure Haskell world! Luckily, you can create typeclasses for each capabilities you encapsulated and program in mtl-style to recover some level of purity.</p>
<p>But why does it use IORef when we have StateT? The article argues that</p>
<ol>
<li>You lose your state when encountering runtime exception</li>
<li>Having the entire app living inside StateT is no better than explicitly using mutables</li>
<li>StateT does not play well with concurrency</li>
</ol>
<p>Let me show you another reason we prefer ReaderT with IORef over StateT.</p>
<h2 id="thread-your-monad-through-an-io-hole">Thread your monad through an IO hole</h2>
<p>When dealing with some low-level bindings to event-driven runtimes, you will inevitably encounter some functions that have type signatures like <code>(X -&gt; IO a) -&gt; IO b</code>. For example, <code>eventListener :: (Event -&gt; IO a) -&gt; IO EventListener</code> that creates an event listener from a event handler function.</p>
<p>Notice the explicit use of <code>IO</code> in the first argument. There is no way to “lower” a function of <code>MonadIO m =&gt; Event -&gt; m a</code> to <code>Event -&gt; IO a</code>, which implies that you cannot use <code>App</code> monad in the event handler, right? Well, not exactly. If you have the full knowledge of the monad being a <code>ReaderT Env IO</code> (not using mtl-style), <code>runReaderT</code> can be used.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">program ::</span> <span class="dt">App</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>program <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  env <span class="ot">&lt;-</span> ask</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  el <span class="ot">&lt;-</span> liftIO <span class="op">$</span> eventListener <span class="op">$</span> runReaderT handler env</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ot">    handler ::</span> <span class="dt">Event</span> <span class="ot">-&gt;</span> <span class="dt">App</span> <span class="dt">Bool</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    handler ev <span class="ot">=</span> <span class="op">...</span></span></code></pre></div>
<p>(There is a library called <code>unliftio</code> that do this for you in a more generic way)</p>
<p>Simply passing <code>env</code> to <code>runReaderT</code> is enough. Remember that <code>Env</code> itself is immutable (it’s ReaderT after all), using it in any context is safe. Access to variables inside the event handler is proxied through <code>IORef</code> so that you correctly get the latest value. The whole process is the same as passing pointers to event handlers in C language. Of course if there is concurrency involved, you have to deal with them yourself (such as to use <code>MVar</code> or <code>TVar</code> instead of <code>IORef</code>).</p>
<p>You cannot do this if it was <code>StateT</code>. If you call <code>evalStateT</code> and pass in the current state, in the handler you got only the copy of the state at the time you register that event listener. In fact, event-driven model and pure states don’t play well together at all!</p>
<h2 id="dont-pretend-to-be-writing-pure-code">Don’t pretend to be writing pure code</h2>
<p>The takeaway here is, write in imperative style if you are doing imperative things. If you want to write pure, functional code, use a library with a higher-level abstraction instead. If you have to deal with lower-level bindings, write in imperative style is usually easier than handcrafting an ad-hoc functional layer on top of it. After all, <a href="https://stackoverflow.com/questions/6622524/why-is-haskell-sometimes-referred-to-as-best-imperative-language">Haskell is the best imperative language</a>.</p>
  </section>
</article>
]]></description>
    <pubDate>Fri, 23 Oct 2020 00:00:00 UT</pubDate>
    <guid>https://site.a64.work/posts/2020-10-23-dont-pretend-to-be-pure.html</guid>
    <dc:creator>autrim64</dc:creator>
</item>
<item>
    <title>Monkey-patching Vue.js from a Browser Addon</title>
    <link>https://site.a64.work/posts/2020-09-23-monkey-patching-vuejs.html</link>
    <description><![CDATA[<h1>Monkey-patching Vue.js from a Browser Addon</h1>
<article>
  <section class="header">
    Posted on September 23, 2020
    
  </section>
  <section>
    <p>Once I found myself in a situation where I have to alter the behavior of a Vue.js webpage that is not written by me. I managed to do that using a browser addon. The same method should apply to userscript manager (such as greasemonkey) as well.</p>
<h2 id="explore-vues-internals-from-console">Explore Vue’s internals from console</h2>
<p>For a reactive framework like Vue.js, manipulating DOM externally doesn’t do anything as DOM is merely the reflective display of the model. You will have to modify the underlaying javascript object to fulfill the goal. Fortunately, Vue’s thin layer of abstraction makes this kinds of hacking easy.</p>
<p>Launch a browser console and have a try:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// suppose '#app' is where you mount Vue to</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> vue <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">'app'</span>)<span class="op">.</span><span class="at">__vue__</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">// access data</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>vue<span class="op">.</span><span class="at">$data</span><span class="op">.</span><span class="at">someData</span> <span class="op">=</span> <span class="dv">12345</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">// access children components</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> fstChild <span class="op">=</span> vue<span class="op">.</span><span class="at">$children</span>[<span class="dv">0</span>]<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">// event handling</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>vue<span class="op">.</span><span class="fu">$on</span>(<span class="bu">event</span><span class="op">,</span> fn)<span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co">// access component methods</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>fstChild<span class="op">.</span><span class="fu">methodName</span>(arg1<span class="op">,</span> arg2)<span class="op">;</span></span></code></pre></div>
<p>You can use most of these “$..”s as if you are writing vue. And component methods can be called directly as well. You can now do many things, modifying data, call component methods, accessing vuex storage and etc.</p>
<p>If you want to go more low-level, you can have a look at properties and methods starting with underscore. Manipulating these requires having a deeper understanding of vue’s internals. If you wants to dig deep, you can have a look at the <a href="https://github.com/numbbbbb/read-vue-source-code">“Read Vue Source Code”</a> series.</p>
<h2 id="code-injection">Code injection</h2>
<p>Now you know how to manipulate the vue object. But you have no direct access to it because a browser extension’s <a href="https://developer.chrome.com/extensions/content_scripts#isolated_world">content script lives in an “isolated world”</a>.</p>
<p>What you can do is to add a &lt;script&gt; element via your content script. Upon creation, code would be executed in the page’s context. You can then remove the element.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> script <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">createElement</span>(<span class="st">'script'</span>)<span class="op">;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>script<span class="op">.</span><span class="at">textContent</span> <span class="op">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">'let vue = document.getElementById(</span><span class="sc">\'</span><span class="st">app</span><span class="sc">\'</span><span class="st">);vue.$data.someData=12345;'</span><span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>(<span class="bu">document</span><span class="op">.</span><span class="at">head</span><span class="op">||</span><span class="bu">document</span><span class="op">.</span><span class="at">documentElement</span>)<span class="op">.</span><span class="fu">appendChild</span>(script)<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>script<span class="op">.</span><span class="fu">remove</span>()<span class="op">;</span></span></code></pre></div>
<p>Be aware the execution of injected code will be asynchronous (and usually parallel) with execution of content scripts.</p>
<h2 id="returning-values-and-error-handling-from-pages-context">Returning values and error handling from page’s context</h2>
<p>You can inject any code by creating &lt;script&gt; elements. But to communicate back to content scripts, you will need to utilize DOM events.</p>
<p>Report back from injected scripts:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* get someData from vue model */</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">dispatchEvent</span>(<span class="kw">new</span> <span class="bu">CustomEvent</span>(<span class="st">'myEvent'</span><span class="op">,</span> {<span class="dt">detail</span><span class="op">:</span> someData}))<span class="op">;</span></span></code></pre></div>
<p>Listen to the custom event from content scripts:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">'myEvent'</span><span class="op">,</span> <span class="kw">function</span> (e) { <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(e<span class="op">.</span><span class="at">detail</span>) }<span class="op">,</span> <span class="kw">true</span>)<span class="op">;</span></span></code></pre></div>
<p>That’s it. Enjoy!</p>
  </section>
</article>
]]></description>
    <pubDate>Wed, 23 Sep 2020 00:00:00 UT</pubDate>
    <guid>https://site.a64.work/posts/2020-09-23-monkey-patching-vuejs.html</guid>
    <dc:creator>autrim64</dc:creator>
</item>
<item>
    <title>Sane Media Files Management using Git-Annex</title>
    <link>https://site.a64.work/posts/2020-08-17-sane-media-management.html</link>
    <description><![CDATA[<h1>Sane Media Files Management using Git-Annex</h1>
<article>
  <section class="header">
    Posted on August 17, 2020
    
  </section>
  <section>
    <h2 id="problem-statement">Problem statement</h2>
<p>Building up your collection of video and music feels good. But when you need to actually find THAT file, lying somewhere in your stack of files, you can only hope your memory doesn’t fail you.</p>
<p>So, you did the following …</p>
<ul>
<li>organize them into directories, by categories or whatever fancy scheme you come up with</li>
<li>try to encode as much info into filename so that a file search would hit</li>
</ul>
<p>However, as your collection grows beyond terrabytes, these methods start to fail. You encounter more and more files that you cannot decide which directory it should go to. And file search becomes increasing slow. And these methods don’t work if your files are spanned across multiple drives, NASs or even some blu-ray discs.</p>
<p>I had all of these headaches until I find <a href="https://git-annex.branchable.com">git-annex</a>. It solved all my problems regarding media file management altogether.</p>
<h2 id="how-git-anenx-solves-it">How git-anenx solves it</h2>
<p>(For implementation detail, see <a href="https://git-annex.branchable.com/how_it_works/">https://git-annex.branchable.com/how_it_works/</a>)</p>
<h3 id="files-across-multiple-storage">Files across multiple storage</h3>
<p>When you add a file using <code>git annex add</code> command, only the metainfo will enter the repository. The actual file will be moved into <code>.git</code> while a symlink is created in its original location. When you push or pull, only the metainfo and symlink is transfered.</p>
<p>Now you can clone this repository everywhere where you need access to your files. You can access all file’s metainfo(symlink) while the actual file may be on different remote sites. When you need the content of the file,‘git annex get’ command automatically retrieves the file for you as long as you are connected to that remote. You can use <code>git annex drop</code> to remove the local file and git-annex guarantees that at least one site will have the actual content. You can even configure git-annex to automatically keep some number of backup copies across different sites.</p>
<h3 id="metadata-management">Metadata management</h3>
<p>Admit it. Filenames are just not enough. Sadly, filesystems today are directory-based rather than tag-based. NTFS supports limited metadata management for media files but Windows sucks. There are also external solutions storing metadata in databases or in propriatary formats, but I cannot depend on these softwares outliving my data.</p>
<p>With git-annex you can ditch them all. You can add adding metadata and tags to any file within the repository. And the format is open and stable.</p>
<h2 id="my-git-annex-setup">My git-annex setup</h2>
<p>I created a single repository named “Annex” to manage all my media files. They are stored in two NAS home servers and also one HDD attached on my main PC. On NAS I used nfs for file sharing as samba does not support symbolic links.</p>
<p>I also make cold backups using read-only bluray discs. Check <a href="https://git-annex.branchable.com/forum/How_do_I_backup_my_data_to_blue_ray_disks__63__/">this</a> page.</p>
<p>I am trying to attach sane amount of metadata to my files. I tag the name of person the video is related to, song title of music videos and etc… I also attach field “onair” to store the date when the clip go public as git-annex supports searching using comparison operators (&lt;, &lt;=, &gt;, &gt;=).</p>
<p>In the migration process, I made a python script to retrieve as many info encoded in the filename. However there are many files that I did not properly name so I have to manually tag them. But the earlier you bite the bullet the less pain you will have in the long run.</p>
<h2 id="the-next-step">The next step</h2>
<p>Sadly, there seems to be no file manager integration. Ideally it should automatically retrieve the content of a file when you open a symlink in a git-annex repository. As for now, you will have to use the commandline to do it manually. I am planning on writing an emacs package to enhance dired-mode (I am using emacs as my file manager now) if I have some time. There is existing packages (git-annex.el) though they are not fully automatic and lacks functionalities regarding tagging and searching.</p>
  </section>
</article>
]]></description>
    <pubDate>Mon, 17 Aug 2020 00:00:00 UT</pubDate>
    <guid>https://site.a64.work/posts/2020-08-17-sane-media-management.html</guid>
    <dc:creator>autrim64</dc:creator>
</item>

    </channel>
</rss>
